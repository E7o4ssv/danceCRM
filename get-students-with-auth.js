const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'http://89.104.71.170:5000';
const CREDENTIALS = {
  username: 'admin', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ª–æ–≥–∏–Ω
  password: 'admin123' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function getAuthToken() {
  try {
    console.log('üîê –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    const response = await axios.post(`${SERVER_URL}/api/auth/login`, CREDENTIALS, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    if (response.data && response.data.token) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      return response.data.token;
    } else {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:');
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    } else {
      console.error('   –û—à–∏–±–∫–∞:', error.message);
    }
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–æ–∫–µ–Ω–æ–º
async function getStudents(token) {
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
    
    const response = await axios.get(`${SERVER_URL}/api/students`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      timeout: 15000
    });
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${response.data.length}`);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:');
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    } else {
      console.error('   –û—à–∏–±–∫–∞:', error.message);
    }
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
async function testEndpoints(token) {
  const endpoints = [
    '/api/health',
    '/api/auth/profile',
    '/api/students',
    '/api/groups'
  ];
  
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤:');
  
  for (const endpoint of endpoints) {
    try {
      const response = await axios.get(`${SERVER_URL}${endpoint}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        timeout: 5000
      });
      
      console.log(`‚úÖ ${endpoint}: ${response.status} - OK`);
      if (endpoint === '/api/students') {
        console.log(`   –°—Ç—É–¥–µ–Ω—Ç–æ–≤: ${response.data.length}`);
      }
    } catch (error) {
      console.log(`‚ùå ${endpoint}: ${error.response?.status || 'ERROR'} - ${error.response?.data?.message || error.message}`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ === –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –°–¢–£–î–ï–ù–¢–û–í ===');
    console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
    console.log(`üë§ –õ–æ–≥–∏–Ω: ${CREDENTIALS.username}`);
    console.log('');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const token = await getAuthToken();
    console.log(`üîë –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    await testEndpoints(token);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const students = await getStudents(token);
    
    // –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    console.log('\nüë• === –°–ü–ò–°–û–ö –°–¢–£–î–ï–ù–¢–û–í ===');
    students.forEach((student, index) => {
      console.log(`${index + 1}. ${student.name}`);
      console.log(`   ID: ${student._id}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${student.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${student.isActive ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`   –ì—Ä—É–ø–ø—ã: ${student.groups ? student.groups.map(g => g.name).join(', ') : '–Ω–µ—Ç –≥—Ä—É–ø–ø'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(student.createdAt).toLocaleDateString('ru-RU')}`);
      console.log('');
    });
    
    console.log('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è');
    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
  }
}

// –ó–∞–ø—É—Å–∫
main(); 