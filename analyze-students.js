const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
function analyzeStudentsData() {
  try {
    console.log('üîç === –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –°–¢–£–î–ï–ù–¢–û–í ===');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const dataDir = 'parsed-data';
    if (!fs.existsSync(dataDir)) {
      console.log('‚ùå –ü–∞–ø–∫–∞ parsed-data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.');
      return;
    }
    
    const files = fs.readdirSync(dataDir)
      .filter(file => file.startsWith('students-') && file.endsWith('.json'))
      .sort()
      .reverse();
    
    if (files.length === 0) {
      console.log('‚ùå –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }
    
    const latestFile = files[0];
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${latestFile}`);
    
    const data = JSON.parse(fs.readFileSync(path.join(dataDir, latestFile), 'utf8'));
    const students = data.students;
    
    console.log(`\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê`);
    console.log(`–°–µ—Ä–≤–µ—Ä: ${data.server}`);
    console.log(`–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${new Date(data.timestamp).toLocaleString('ru-RU')}`);
    console.log(`–í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${students.length}`);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = {
      total: students.length,
      active: students.filter(s => s.isActive).length,
      inactive: students.filter(s => !s.isActive).length,
      withPhone: students.filter(s => s.phone).length,
      withoutPhone: students.filter(s => !s.phone).length,
      inGroups: students.filter(s => s.groups && s.groups.length > 0).length,
      withoutGroups: students.filter(s => !s.groups || s.groups.length === 0).length,
      createdThisWeek: students.filter(s => {
        const created = new Date(s.createdAt);
        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7);
        return created >= weekAgo;
      }).length,
      createdThisMonth: students.filter(s => {
        const created = new Date(s.createdAt);
        const monthAgo = new Date();
        monthAgo.setMonth(monthAgo.getMonth() - 1);
        return created >= monthAgo;
      }).length
    };
    
    console.log(`\nüë• –°–¢–ê–¢–£–° –°–¢–£–î–ï–ù–¢–û–í`);
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.active} (${((stats.active/stats.total)*100).toFixed(1)}%)`);
    console.log(`‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.inactive} (${((stats.inactive/stats.total)*100).toFixed(1)}%)`);
    
    console.log(`\nüì± –ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø`);
    console.log(`üìû –° —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${stats.withPhone} (${((stats.withPhone/stats.total)*100).toFixed(1)}%)`);
    console.log(`üö´ –ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${stats.withoutPhone} (${((stats.withoutPhone/stats.total)*100).toFixed(1)}%)`);
    
    console.log(`\nüë• –ì–†–£–ü–ü–´`);
    console.log(`üë• –í –≥—Ä—É–ø–ø–∞—Ö: ${stats.inGroups} (${((stats.inGroups/stats.total)*100).toFixed(1)}%)`);
    console.log(`üö´ –ë–µ–∑ –≥—Ä—É–ø–ø: ${stats.withoutGroups} (${((stats.withoutGroups/stats.total)*100).toFixed(1)}%)`);
    
    console.log(`\nüìÖ –î–ê–¢–´ –°–û–ó–î–ê–ù–ò–Ø`);
    console.log(`üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: ${stats.createdThisWeek} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    console.log(`üìÖ –ó–∞ –º–µ—Å—è—Ü: ${stats.createdThisMonth} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    
    // –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø
    const groupAnalysis = {};
    students.forEach(student => {
      if (student.groups) {
        student.groups.forEach(group => {
          if (!groupAnalysis[group.name]) {
            groupAnalysis[group.name] = {
              count: 0,
              students: [],
              room: group.room,
              dayOfWeek: group.dayOfWeek,
              time: group.time
            };
          }
          groupAnalysis[group.name].count++;
          groupAnalysis[group.name].students.push(student.name);
        });
      }
    });
    
    console.log(`\nüèÜ –ê–ù–ê–õ–ò–ó –ì–†–£–ü–ü`);
    if (Object.keys(groupAnalysis).length > 0) {
      Object.entries(groupAnalysis)
        .sort(([,a], [,b]) => b.count - a.count)
        .forEach(([groupName, info], index) => {
          console.log(`${index + 1}. ${groupName}`);
          console.log(`   üë• –°—Ç—É–¥–µ–Ω—Ç–æ–≤: ${info.count}`);
          console.log(`   üè† –ü–æ–º–µ—â–µ–Ω–∏–µ: ${info.room}`);
          console.log(`   üìÖ –î–µ–Ω—å: ${info.dayOfWeek}`);
          console.log(`   ‚è∞ –í—Ä–µ–º—è: ${info.time}`);
          console.log(`   üë§ –°—Ç—É–¥–µ–Ω—Ç—ã: ${info.students.join(', ')}`);
          console.log('');
        });
    } else {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö');
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    const phoneAnalysis = {};
    students.forEach(student => {
      if (student.phone) {
        const prefix = student.phone.substring(0, 4);
        if (!phoneAnalysis[prefix]) {
          phoneAnalysis[prefix] = 0;
        }
        phoneAnalysis[prefix]++;
      }
    });
    
    console.log(`\nüì± –ê–ù–ê–õ–ò–ó –¢–ï–õ–ï–§–û–ù–û–í`);
    if (Object.keys(phoneAnalysis).length > 0) {
      Object.entries(phoneAnalysis)
        .sort(([,a], [,b]) => b - a)
        .forEach(([prefix, count]) => {
          console.log(`üìû ${prefix}***: ${count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
        });
    } else {
      console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö');
    }
    
    // –°—Ç—É–¥–µ–Ω—Ç—ã –±–µ–∑ –≥—Ä—É–ø–ø
    const studentsWithoutGroups = students.filter(s => !s.groups || s.groups.length === 0);
    if (studentsWithoutGroups.length > 0) {
      console.log(`\nüö´ –°–¢–£–î–ï–ù–¢–´ –ë–ï–ó –ì–†–£–ü–ü (${studentsWithoutGroups.length})`);
      studentsWithoutGroups.forEach((student, index) => {
        const phoneInfo = student.phone || '–Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        const createdDate = new Date(student.createdAt).toLocaleDateString('ru-RU');
        console.log(`${index + 1}. ${student.name} (${phoneInfo}) - —Å–æ–∑–¥–∞–Ω: ${createdDate}`);
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò`);
    if (stats.withoutPhone > 0) {
      console.log(`üìû –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è ${stats.withoutPhone} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    }
    if (stats.withoutGroups > 0) {
      console.log(`üë• –ó–∞–ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—ã ${stats.withoutGroups} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    }
    if (stats.inactive > 0) {
      console.log(`‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å ${stats.inactive} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    }
    
    console.log(`\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeStudentsData(); 