const axios = require('axios');

const API_BASE_URL = 'http://89.104.71.170:5000/api';
const REAL_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODc4NDczYWIwMWY3OGVlZDBlYWVmZTQiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NTI3NzAwNDcsImV4cCI6MTc1Mjg1NjQ0N30.c80rtVNkpmjV4xWcKVez_ZB_R_-riaj89xFBvbku_Ww';

async function testAllFeatures() {
  try {
    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π');
    console.log('=====================================');
    
    // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log('\n1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const [studentsRes, groupsRes, usersRes] = await Promise.all([
      axios.get(`${API_BASE_URL}/students`, { headers: { Authorization: `Bearer ${REAL_TOKEN}` } }),
      axios.get(`${API_BASE_URL}/groups`, { headers: { Authorization: `Bearer ${REAL_TOKEN}` } }),
      axios.get(`${API_BASE_URL}/auth/users`, { headers: { Authorization: `Bearer ${REAL_TOKEN}` } })
    ]);
    
    console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç–æ–≤: ${studentsRes.data.length}`);
    console.log(`‚úÖ –ì—Ä—É–ø–ø: ${groupsRes.data.length}`);
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersRes.data.length}`);
    
    // 2. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏ –≤ –≥—Ä—É–ø–ø–µ...');
    if (studentsRes.data.length > 0 && groupsRes.data.length > 0) {
      const student = studentsRes.data[0];
      const group = groupsRes.data[0];
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
      try {
        await axios.post(
          `${API_BASE_URL}/groups/${group._id}/students`,
          { studentId: student._id },
          { headers: { Authorization: `Bearer ${REAL_TOKEN}` } }
        );
        console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç ${student.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É ${group.name}`);
      } catch (error) {
        if (error.response?.status === 400 && error.response?.data?.message?.includes('already')) {
          console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É–∂–µ –≤ –≥—Ä—É–ø–ø–µ (–æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${error.response?.status}`);
        }
      }
      
      // –£–¥–∞–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞
      try {
        await axios.delete(
          `${API_BASE_URL}/groups/${group._id}/students/${student._id}`,
          { headers: { Authorization: `Bearer ${REAL_TOKEN}` } }
        );
        console.log(`‚úÖ –°—Ç—É–¥–µ–Ω—Ç ${student.name} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã ${group.name}`);
      } catch (error) {
        console.log(`‚ÑπÔ∏è –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –±—ã–ª –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω`);
      }
    }
    
    // 3. –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...');
    if (usersRes.data.length > 0) {
      const teacher = usersRes.data.find(u => u.role === 'teacher') || usersRes.data[0];
      const newStatus = !teacher.isActive;
      
      try {
        await axios.put(
          `${API_BASE_URL}/auth/users/${teacher._id}/status`,
          { isActive: newStatus },
          { headers: { Authorization: `Bearer ${REAL_TOKEN}` } }
        );
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ${teacher.name} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newStatus ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.response?.status}`);
      }
    }
    
    // 4. –¢–µ—Å—Ç —á–∞—Ç–∞ –≥—Ä—É–ø–ø—ã
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç —á–∞—Ç–∞ –≥—Ä—É–ø–ø—ã...');
    if (groupsRes.data.length > 0) {
      const group = groupsRes.data[0];
      
      // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç
      try {
        const chatResponse = await axios.get(`${API_BASE_URL}/chat/group/${group._id}`, {
          headers: { Authorization: `Bearer ${REAL_TOKEN}` }
        });
        console.log(`‚úÖ –ß–∞—Ç –≥—Ä—É–ø–ø—ã ${group.name} –ø–æ–ª—É—á–µ–Ω`);
        console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chatResponse.data.participants?.length || 0}`);
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π: ${chatResponse.data.messages?.length || 0}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageResponse = await axios.post(
          `${API_BASE_URL}/chat/group/${group._id}/messages`,
          { content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ' + new Date().toLocaleString() },
          { headers: { Authorization: `Bearer ${REAL_TOKEN}` } }
        );
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç –≥—Ä—É–ø–ø—ã ${group.name}`);
        console.log(`   –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageResponse.data.messages?.length || 0}`);
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: ${error.response?.status}`);
      }
    }
    
    console.log('\nüéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ß–∞—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏');
    
    console.log('\nüöÄ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    console.log('\nüìã –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:');
    console.log('‚Ä¢ –í —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã - –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ —á–µ–∫–±–æ–∫—Å–∞–º–∏');
    console.log('‚Ä¢ –í —É—á–∏—Ç–µ–ª—è—Ö - –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–∫–æ–π (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)');
    console.log('‚Ä¢ –í –≥—Ä—É–ø–ø–∞—Ö - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —á–∞—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π');
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAllFeatures(); 