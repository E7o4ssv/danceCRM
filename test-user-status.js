const axios = require('axios');

const API_BASE_URL = 'http://89.104.71.170:5000/api';
const ADMIN_CREDENTIALS = {
  username: 'admin',
  password: 'admin123'
};

async function testUserStatusUpdate() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, ADMIN_CREDENTIALS);
    const token = loginResponse.data.token;
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë®‚Äçüíº –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await axios.get(`${API_BASE_URL}/auth/users`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResponse.data.length}`);
    
    if (usersResponse.data.length > 0) {
      const firstUser = usersResponse.data[0];
      console.log(`\nüë§ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstUser.name} (ID: ${firstUser._id})`);
      console.log(`   –†–æ–ª—å: ${firstUser.role}`);
      console.log(`   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${firstUser.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      console.log('\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const newStatus = !firstUser.isActive;
      
      console.log(`   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: PUT ${API_BASE_URL}/auth/users/${firstUser._id}/status`);
      console.log(`   –î–∞–Ω–Ω—ã–µ: { isActive: ${newStatus} }`);
      
      try {
        const updateStatusResponse = await axios.put(
          `${API_BASE_URL}/auth/users/${firstUser._id}/status`,
          { isActive: newStatus },
          { 
            headers: { 
              Authorization: `Bearer ${token}`,
              'Content-Type': 'application/json'
            } 
          }
        );
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newStatus ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
        console.log(`   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:`, updateStatusResponse.data);
        
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:');
        if (error.response) {
          console.log(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
          console.log(`   –î–∞–Ω–Ω—ã–µ:`, error.response.data);
          console.log(`   –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, error.response.headers);
        } else {
          console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:');
    if (error.response) {
      console.log(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.log(`   –î–∞–Ω–Ω—ã–µ:`, error.response.data);
    } else {
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testUserStatusUpdate(); 