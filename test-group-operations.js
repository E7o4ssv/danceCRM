const axios = require('axios');

const API_BASE_URL = 'http://89.104.71.170:5000/api';
const ADMIN_CREDENTIALS = {
  username: 'admin',
  password: 'admin123'
};

async function testGroupOperations() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞...');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/login`, ADMIN_CREDENTIALS);
    const token = loginResponse.data.token;
    
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...');
    const groupsResponse = await axios.get(`${API_BASE_URL}/groups`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${groupsResponse.data.length}`);
    
    if (groupsResponse.data.length > 0) {
      const firstGroup = groupsResponse.data[0];
      console.log(`\nüìù –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞: ${firstGroup.name} (ID: ${firstGroup._id})`);
      console.log(`   –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: ${firstGroup.students ? firstGroup.students.length : 0}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
      console.log('\nüë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
      const studentsResponse = await axios.get(`${API_BASE_URL}/students`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${studentsResponse.data.length}`);
      
      if (studentsResponse.data.length > 0) {
        const firstStudent = studentsResponse.data[0];
        console.log(`\nüë§ –ü–µ—Ä–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç: ${firstStudent.name} (ID: ${firstStudent._id})`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
        console.log('\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É...');
        try {
          const addStudentResponse = await axios.post(
            `${API_BASE_URL}/groups/${firstGroup._id}/students`,
            { studentId: firstStudent._id },
            { headers: { Authorization: `Bearer ${token}` } }
          );
          
          console.log('‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É');
          console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: ${addStudentResponse.data.name}`);
          console.log(`   –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: ${addStudentResponse.data.students.length}`);
          
        } catch (error) {
          if (error.response) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: ${error.response.data.message}`);
          } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
          }
        }
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë®‚Äçüíº –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await axios.get(`${API_BASE_URL}/auth/users`, {
      headers: { Authorization: `Bearer ${token}` }
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResponse.data.length}`);
    
    if (usersResponse.data.length > 0) {
      const firstUser = usersResponse.data[0];
      console.log(`\nüë§ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstUser.name} (ID: ${firstUser._id})`);
      console.log(`   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${firstUser.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      console.log('\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      try {
        const newStatus = !firstUser.isActive;
        const updateStatusResponse = await axios.put(
          `${API_BASE_URL}/auth/users/${firstUser._id}/status`,
          { isActive: newStatus },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newStatus ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
        
      } catch (error) {
        if (error.response) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.response.data.message}`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }
    
  } catch (error) {
    if (error.response) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ API: ${error.response.status} - ${error.response.data.message}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGroupOperations(); 