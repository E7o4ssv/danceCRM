const axios = require('axios');

const API_BASE_URL = 'http://89.104.71.170:5000/api';
const REAL_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODc4NDczYWIwMWY3OGVlZDBlYWVmZTQiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NTI3NzAwNDcsImV4cCI6MTc1Mjg1NjQ0N30.c80rtVNkpmjV4xWcKVez_ZB_R_-riaj89xFBvbku_Ww';

async function testWithRealToken() {
  try {
    console.log('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    console.log('\nüë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
    const studentsResponse = await axios.get(`${API_BASE_URL}/students`, {
      headers: { 
        Authorization: `Bearer ${REAL_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${studentsResponse.data.length}`);
    
    if (studentsResponse.data.length > 0) {
      const firstStudent = studentsResponse.data[0];
      console.log(`\nüë§ –ü–µ—Ä–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç: ${firstStudent.name} (ID: ${firstStudent._id})`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø
    console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...');
    const groupsResponse = await axios.get(`${API_BASE_URL}/groups`, {
      headers: { 
        Authorization: `Bearer ${REAL_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: ${groupsResponse.data.length}`);
    
    if (groupsResponse.data.length > 0) {
      const firstGroup = groupsResponse.data[0];
      console.log(`\nüìù –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞: ${firstGroup.name} (ID: ${firstGroup._id})`);
      console.log(`   –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: ${firstGroup.students ? firstGroup.students.length : 0}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüë®‚Äçüíº –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const usersResponse = await axios.get(`${API_BASE_URL}/auth/users`, {
      headers: { 
        Authorization: `Bearer ${REAL_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersResponse.data.length}`);
    
    if (usersResponse.data.length > 0) {
      const firstUser = usersResponse.data[0];
      console.log(`\nüë§ –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstUser.name} (ID: ${firstUser._id})`);
      console.log(`   –†–æ–ª—å: ${firstUser.role}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${firstUser.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–æ—É—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    if (usersResponse.data.length > 0) {
      const testUser = usersResponse.data[0];
      const newStatus = !testUser.isActive;
      
      try {
        const updateStatusResponse = await axios.put(
          `${API_BASE_URL}/auth/users/${testUser._id}/status`,
          { isActive: newStatus },
          { 
            headers: { 
              Authorization: `Bearer ${REAL_TOKEN}`,
              'Content-Type': 'application/json'
            } 
          }
        );
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        console.log(`   –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${newStatus ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
        
      } catch (error) {
        if (error.response) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.response.status}`);
          console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        }
      }
    }
    
  } catch (error) {
    console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:');
    if (error.response) {
      console.log(`   –°—Ç–∞—Ç—É—Å: ${error.response.status}`);
      console.log(`   –î–∞–Ω–Ω—ã–µ:`, error.response.data);
    } else {
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testWithRealToken(); 