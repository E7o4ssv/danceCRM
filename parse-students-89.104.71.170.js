const axios = require('axios');
const fs = require('fs');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const SERVER_URL = 'http://89.104.71.170:5000';
const CREDENTIALS = {
  username: 'admin', // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ª–æ–≥–∏–Ω
  password: 'admin123' // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    const response = await axios.get(`${SERVER_URL}/api/health`, {
      timeout: 5000
    });
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', response.data);
    return true;
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function getAuthToken() {
  try {
    console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
    const response = await axios.post(`${SERVER_URL}/api/auth/login`, CREDENTIALS, {
      timeout: 10000
    });
    
    if (response.data.token) {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      return response.data.token;
    } else {
      throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.response?.data?.message || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
async function fetchStudents(token) {
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
    const response = await axios.get(`${SERVER_URL}/api/students`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      timeout: 15000
    });
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${response.data.length}`);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', error.response?.data?.message || error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø
async function fetchGroups(token) {
  try {
    console.log('üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø...');
    const response = await axios.get(`${SERVER_URL}/api/groups`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≥—Ä—É–ø–ø: ${response.data.length}`);
    return response.data;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø:', error.response?.data?.message || error.message);
    return [];
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
async function parseStudentsFromServer() {
  try {
    console.log('üöÄ === –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–• –°–¢–£–î–ï–ù–¢–û–í ===');
    console.log(`üåê –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
    console.log(`üë§ –õ–æ–≥–∏–Ω: ${CREDENTIALS.username}`);
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const isServerAvailable = await checkServerHealth();
    if (!isServerAvailable) {
      console.log('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL');
      console.log('   - –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = await getAuthToken();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    const students = await fetchStudents(token);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø
    const groups = await fetchGroups(token);

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    const dataDir = 'parsed-data';
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir);
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ parsed-data');
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º timestamp
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ JSON
    const studentsData = {
      server: SERVER_URL,
      timestamp: new Date().toISOString(),
      total: students.length,
      students: students
    };
    
    const studentsFile = `${dataDir}/students-${timestamp}.json`;
    fs.writeFileSync(studentsFile, JSON.stringify(studentsData, null, 2));
    console.log(`üíæ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${studentsFile}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø –≤ JSON
    if (groups.length > 0) {
      const groupsData = {
        server: SERVER_URL,
        timestamp: new Date().toISOString(),
        total: groups.length,
        groups: groups
      };
      
      const groupsFile = `${dataDir}/groups-${timestamp}.json`;
      fs.writeFileSync(groupsFile, JSON.stringify(groupsData, null, 2));
      console.log(`üíæ –ì—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${groupsFile}`);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª
    const csvData = generateCSV(students);
    const csvFile = `${dataDir}/students-${timestamp}.csv`;
    fs.writeFileSync(csvFile, csvData);
    console.log(`üìä CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${csvFile}`);

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    printStatistics(students, groups);

    console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÇ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: ${dataDir}`);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è');
    console.log('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞
function generateCSV(students) {
  const headers = [
    'ID —Å—Ç—É–¥–µ–Ω—Ç–∞', 
    '–ò–º—è', 
    '–¢–µ–ª–µ—Ñ–æ–Ω', 
    '–ê–∫—Ç–∏–≤–µ–Ω', 
    '–ì—Ä—É–ø–ø—ã', 
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø',
    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
  ];
  
  const rows = students.map(student => [
    student._id,
    student.name,
    student.phone || '',
    student.isActive ? '–î–∞' : '–ù–µ—Ç',
    student.groups ? student.groups.map(g => g.name).join('; ') : '',
    student.groups ? student.groups.length : 0,
    new Date(student.createdAt).toLocaleDateString('ru-RU')
  ]);
  
  return [headers, ...rows]
    .map(row => row.map(cell => `"${cell}"`).join(','))
    .join('\n');
}

// –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function printStatistics(students, groups) {
  console.log('\nüìà === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
  console.log(`üë• –í—Å–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${students.length}`);
  console.log(`üë• –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: ${groups.length}`);
  
  const activeStudents = students.filter(s => s.isActive);
  console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${activeStudents.length}`);
  
  const studentsWithPhone = students.filter(s => s.phone);
  console.log(`üì± –°—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${studentsWithPhone.length}`);
  
  const studentsInGroups = students.filter(s => s.groups && s.groups.length > 0);
  console.log(`üë• –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö: ${studentsInGroups.length}`);
  
  const studentsWithoutGroups = students.filter(s => !s.groups || s.groups.length === 0);
  console.log(`üö´ –°—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø: ${studentsWithoutGroups.length}`);
  
  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
  const groupStats = {};
  students.forEach(student => {
    if (student.groups) {
      student.groups.forEach(group => {
        if (!groupStats[group.name]) {
          groupStats[group.name] = 0;
        }
        groupStats[group.name]++;
      });
    }
  });
  
  console.log('\nüèÜ === –¢–û–ü –ì–†–£–ü–ü ===');
  Object.entries(groupStats)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 10)
    .forEach(([groupName, count], index) => {
      console.log(`${index + 1}. ${groupName}: ${count} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    });
  
  // –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  console.log('\nüë§ === –ü–†–ò–ú–ï–†–´ –°–¢–£–î–ï–ù–¢–û–í ===');
  students.slice(0, 5).forEach((student, index) => {
    const groupsInfo = student.groups ? student.groups.map(g => g.name).join(', ') : '–Ω–µ—Ç –≥—Ä—É–ø–ø';
    const phoneInfo = student.phone || '–Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    const status = student.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
    console.log(`${index + 1}. ${student.name} (${phoneInfo}) - ${status} - –≥—Ä—É–ø–ø—ã: ${groupsInfo}`);
  });
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
parseStudentsFromServer(); 